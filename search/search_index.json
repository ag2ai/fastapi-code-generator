{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"fastapi-code-generator \ud83d\udd17 This code generator creates a FastAPI app from an openapi file. This project is in experimental phase. \ud83d\udd17 fastapi-code-generator uses datamodel-code-generator to generate pydantic models Help \ud83d\udd17 See documentation for more details. Installation \ud83d\udd17 To install fastapi-code-generator : $ pip install fastapi-code-generator Usage \ud83d\udd17 The fastapi-code-generator command: Usage : fastapi - codegen [ OPTIONS ] Options : - i , -- input FILENAME [ required ] - o , -- output PATH [ required ] - t , -- template - dir PATH - m , -- model - file Specify generated model file path + name , if not default to models . py - c , -- custom - visitors PATH - A custom visitor that adds variables to the template . -- install - completion Install completion for the current shell . -- show - completion Show completion for the current shell , to copy it or customize the installation . --help Show this message and exit. Example \ud83d\udd17 OpenAPI \ud83d\udd17 $ fastapi-codegen --input api.yaml --output app api.yaml openapi: \"3.0.0\" info: version: 1.0.0 title: Swagger Petstore license: name: MIT servers: - url: http://petstore.swagger.io/v1 paths: /pets: get: summary: List all pets operationId: listPets tags: - pets parameters: - name: limit in: query description: How many items to return at one time (max 100) required: false schema: type: integer format: int32 responses: '200': description: A paged array of pets headers: x-next: description: A link to the next page of responses schema: type: string content: application/json: schema: $ref: \"#/components/schemas/Pets\" default: description: unexpected error content: application/json: schema: $ref: \"#/components/schemas/Error\" x-amazon-apigateway-integration: uri: Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior: when_no_templates httpMethod: POST type: aws_proxy post: summary: Create a pet operationId: createPets tags: - pets responses: '201': description: Null response default: description: unexpected error content: application/json: schema: $ref: \"#/components/schemas/Error\" x-amazon-apigateway-integration: uri: Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior: when_no_templates httpMethod: POST type: aws_proxy /pets/{petId}: get: summary: Info for a specific pet operationId: showPetById tags: - pets parameters: - name: petId in: path required: true description: The id of the pet to retrieve schema: type: string responses: '200': description: Expected response to a valid request content: application/json: schema: $ref: \"#/components/schemas/Pets\" default: description: unexpected error content: application/json: schema: $ref: \"#/components/schemas/Error\" x-amazon-apigateway-integration: uri: Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior: when_no_templates httpMethod: POST type: aws_proxy components: schemas: Pet: required: - id - name properties: id: type: integer format: int64 name: type: string tag: type: string Pets: type: array description: list of pet items: $ref: \"#/components/schemas/Pet\" Error: required: - code - message properties: code: type: integer format: int32 message: type: string app/main.py : # generated by fastapi-codegen: # filename: api.yaml # timestamp: 2020-06-14T10:45:22+00:00 from __future__ import annotations from typing import Optional from fastapi import FastAPI , Query from .models import Pets app = FastAPI ( version = \"1.0.0\" , title = \"Swagger Petstore\" , license = \"{'name': 'MIT'}\" ,) @app . get ( '/pets' , response_model = Pets ) def list_pets ( limit : Optional [ int ] = None ) -> Pets : \"\"\" List all pets \"\"\" pass @app . post ( '/pets' , response_model = None ) def create_pets () -> None : \"\"\" Create a pet \"\"\" pass @app . get ( '/pets/ {pet_id} ' , response_model = Pets ) def show_pet_by_id ( pet_id : str = Query ( ... , alias = 'petId' )) -> Pets : \"\"\" Info for a specific pet \"\"\" pass app/models.py : # generated by datamodel-codegen: # filename: api.yaml # timestamp: 2020-06-14T10:45:22+00:00 from typing import List , Optional from pydantic import BaseModel , Field class Pet ( BaseModel ): id : int name : str tag : Optional [ str ] = None class Pets ( BaseModel ): __root__ : List [ Pet ] = Field ( ... , description = 'list of pet' ) class Error ( BaseModel ): code : int message : str Custom Template \ud83d\udd17 If you want to generate custom *.py files then you can give a custom template directory to fastapi-code-generator with -t or --template-dir options of the command. fastapi-code-generator will search for jinja2 template files in given template directory, for example some_jinja_templates/list_pets.py . fastapi-code-generator --template-dir some_jinja_templates --output app --input api.yaml These files will be rendered and written to the output directory. Also, the generated file names will be created with the template name and extension of *.py , for example app/list_pets.py will be a separate file generated from the jinja template alongside the default app/main.py Variables \ud83d\udd17 You can use the following variables in the jinja2 templates imports all imports statements info all info statements operations operations is list of operation operation.type HTTP METHOD operation.path Path operation.snake_case_path Snake-cased Path operation.response response object operation.function_name function name is created operationId or METHOD + Path operation.snake_case_arguments Snake-cased function arguments operation.security Security operation.summary a summary default template \ud83d\udd17 main.jinja2 from __future__ import annotations from fastapi import FastAPI {{ imports }} app = FastAPI ( { % if info % } { % for key , value in info . items () % } {{ key }} = \"{{ value }}\" , { % endfor % } { % endif % } ) { % for operation in operations % } @app . {{ operation . type }}( '{{operation.snake_case_path}}' , response_model = {{ operation . response }}) def {{ operation . function_name }}({{ operation . snake_case_arguments }}) -> {{ operation . response }}: { %- if operation . summary % } \"\"\" {{ operation.summary }} \"\"\" { %- endif % } pass { % endfor % } Custom Visitors \ud83d\udd17 Custom visitors allow you to pass custom variables to your custom templates. E.g. custom template \ud83d\udd17 custom-template.jinja2 #{ % custom_header %} from __future__ import annotations from fastapi import FastAPI ... custom visitor \ud83d\udd17 custom-visitor.py from typing import Dict , Optional from fastapi_code_generator.parser import OpenAPIParser from fastapi_code_generator.visitor import Visitor def custom_visitor ( parser : OpenAPIParser , model_path : Path ) -> Dict [ str , object ]: return { 'custom_header' : 'My header' } visit : Visitor = custom_visitor PyPi \ud83d\udd17 https://pypi.org/project/fastapi-code-generator License \ud83d\udd17 fastapi-code-generator is released under the MIT License. http://www.opensource.org/licenses/mit-license","title":"Overview"},{"location":"#fastapi-code-generator","text":"This code generator creates a FastAPI app from an openapi file.","title":"fastapi-code-generator"},{"location":"#this-project-is-in-experimental-phase","text":"fastapi-code-generator uses datamodel-code-generator to generate pydantic models","title":"This project is in experimental phase."},{"location":"#help","text":"See documentation for more details.","title":"Help"},{"location":"#installation","text":"To install fastapi-code-generator : $ pip install fastapi-code-generator","title":"Installation"},{"location":"#usage","text":"The fastapi-code-generator command: Usage : fastapi - codegen [ OPTIONS ] Options : - i , -- input FILENAME [ required ] - o , -- output PATH [ required ] - t , -- template - dir PATH - m , -- model - file Specify generated model file path + name , if not default to models . py - c , -- custom - visitors PATH - A custom visitor that adds variables to the template . -- install - completion Install completion for the current shell . -- show - completion Show completion for the current shell , to copy it or customize the installation . --help Show this message and exit.","title":"Usage"},{"location":"#example","text":"","title":"Example"},{"location":"#openapi","text":"$ fastapi-codegen --input api.yaml --output app api.yaml openapi: \"3.0.0\" info: version: 1.0.0 title: Swagger Petstore license: name: MIT servers: - url: http://petstore.swagger.io/v1 paths: /pets: get: summary: List all pets operationId: listPets tags: - pets parameters: - name: limit in: query description: How many items to return at one time (max 100) required: false schema: type: integer format: int32 responses: '200': description: A paged array of pets headers: x-next: description: A link to the next page of responses schema: type: string content: application/json: schema: $ref: \"#/components/schemas/Pets\" default: description: unexpected error content: application/json: schema: $ref: \"#/components/schemas/Error\" x-amazon-apigateway-integration: uri: Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior: when_no_templates httpMethod: POST type: aws_proxy post: summary: Create a pet operationId: createPets tags: - pets responses: '201': description: Null response default: description: unexpected error content: application/json: schema: $ref: \"#/components/schemas/Error\" x-amazon-apigateway-integration: uri: Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior: when_no_templates httpMethod: POST type: aws_proxy /pets/{petId}: get: summary: Info for a specific pet operationId: showPetById tags: - pets parameters: - name: petId in: path required: true description: The id of the pet to retrieve schema: type: string responses: '200': description: Expected response to a valid request content: application/json: schema: $ref: \"#/components/schemas/Pets\" default: description: unexpected error content: application/json: schema: $ref: \"#/components/schemas/Error\" x-amazon-apigateway-integration: uri: Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PythonVersionFunction.Arn}/invocations passthroughBehavior: when_no_templates httpMethod: POST type: aws_proxy components: schemas: Pet: required: - id - name properties: id: type: integer format: int64 name: type: string tag: type: string Pets: type: array description: list of pet items: $ref: \"#/components/schemas/Pet\" Error: required: - code - message properties: code: type: integer format: int32 message: type: string app/main.py : # generated by fastapi-codegen: # filename: api.yaml # timestamp: 2020-06-14T10:45:22+00:00 from __future__ import annotations from typing import Optional from fastapi import FastAPI , Query from .models import Pets app = FastAPI ( version = \"1.0.0\" , title = \"Swagger Petstore\" , license = \"{'name': 'MIT'}\" ,) @app . get ( '/pets' , response_model = Pets ) def list_pets ( limit : Optional [ int ] = None ) -> Pets : \"\"\" List all pets \"\"\" pass @app . post ( '/pets' , response_model = None ) def create_pets () -> None : \"\"\" Create a pet \"\"\" pass @app . get ( '/pets/ {pet_id} ' , response_model = Pets ) def show_pet_by_id ( pet_id : str = Query ( ... , alias = 'petId' )) -> Pets : \"\"\" Info for a specific pet \"\"\" pass app/models.py : # generated by datamodel-codegen: # filename: api.yaml # timestamp: 2020-06-14T10:45:22+00:00 from typing import List , Optional from pydantic import BaseModel , Field class Pet ( BaseModel ): id : int name : str tag : Optional [ str ] = None class Pets ( BaseModel ): __root__ : List [ Pet ] = Field ( ... , description = 'list of pet' ) class Error ( BaseModel ): code : int message : str","title":"OpenAPI"},{"location":"#custom-template","text":"If you want to generate custom *.py files then you can give a custom template directory to fastapi-code-generator with -t or --template-dir options of the command. fastapi-code-generator will search for jinja2 template files in given template directory, for example some_jinja_templates/list_pets.py . fastapi-code-generator --template-dir some_jinja_templates --output app --input api.yaml These files will be rendered and written to the output directory. Also, the generated file names will be created with the template name and extension of *.py , for example app/list_pets.py will be a separate file generated from the jinja template alongside the default app/main.py","title":"Custom Template"},{"location":"#variables","text":"You can use the following variables in the jinja2 templates imports all imports statements info all info statements operations operations is list of operation operation.type HTTP METHOD operation.path Path operation.snake_case_path Snake-cased Path operation.response response object operation.function_name function name is created operationId or METHOD + Path operation.snake_case_arguments Snake-cased function arguments operation.security Security operation.summary a summary","title":"Variables"},{"location":"#default-template","text":"main.jinja2 from __future__ import annotations from fastapi import FastAPI {{ imports }} app = FastAPI ( { % if info % } { % for key , value in info . items () % } {{ key }} = \"{{ value }}\" , { % endfor % } { % endif % } ) { % for operation in operations % } @app . {{ operation . type }}( '{{operation.snake_case_path}}' , response_model = {{ operation . response }}) def {{ operation . function_name }}({{ operation . snake_case_arguments }}) -> {{ operation . response }}: { %- if operation . summary % } \"\"\" {{ operation.summary }} \"\"\" { %- endif % } pass { % endfor % }","title":"default template"},{"location":"#custom-visitors","text":"Custom visitors allow you to pass custom variables to your custom templates. E.g.","title":"Custom Visitors"},{"location":"#custom-template_1","text":"custom-template.jinja2 #{ % custom_header %} from __future__ import annotations from fastapi import FastAPI ...","title":"custom template"},{"location":"#custom-visitor","text":"custom-visitor.py from typing import Dict , Optional from fastapi_code_generator.parser import OpenAPIParser from fastapi_code_generator.visitor import Visitor def custom_visitor ( parser : OpenAPIParser , model_path : Path ) -> Dict [ str , object ]: return { 'custom_header' : 'My header' } visit : Visitor = custom_visitor","title":"custom visitor"},{"location":"#pypi","text":"https://pypi.org/project/fastapi-code-generator","title":"PyPi"},{"location":"#license","text":"fastapi-code-generator is released under the MIT License. http://www.opensource.org/licenses/mit-license","title":"License"},{"location":"development-contributing/","text":"Development \ud83d\udd17 Install the package in editable mode: $ git clone git@github.com:koxudaxi/fastapi-code-generator.git $ poetry install fastapi-code-generator Contribute \ud83d\udd17 We are waiting for your contributions to fastapi-code-generator . How to contribute \ud83d\udd17 ## 1. Clone your fork repository $ git clone git@github.com:<your username>/fastapi-code-generator.git $ cd fastapi-code-generator ## 2. Install [poetry](https://github.com/python-poetry/poetry) $ curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python ## 3. Install dependencies $ poetry install ## 4. Create new branch and rewrite code. $ git checkout -b new-branch ## 5. Run unittest (you should pass all test and coverage should be 100%) $ ./scripts/test.sh ## 6. Format code $ ./scripts/format.sh ## 7. Check lint (mypy) $ ./scripts/lint.sh ## 8. Commit and Push...","title":"Development-Contributing"},{"location":"development-contributing/#development","text":"Install the package in editable mode: $ git clone git@github.com:koxudaxi/fastapi-code-generator.git $ poetry install fastapi-code-generator","title":"Development"},{"location":"development-contributing/#contribute","text":"We are waiting for your contributions to fastapi-code-generator .","title":"Contribute"},{"location":"development-contributing/#how-to-contribute","text":"## 1. Clone your fork repository $ git clone git@github.com:<your username>/fastapi-code-generator.git $ cd fastapi-code-generator ## 2. Install [poetry](https://github.com/python-poetry/poetry) $ curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python ## 3. Install dependencies $ poetry install ## 4. Create new branch and rewrite code. $ git checkout -b new-branch ## 5. Run unittest (you should pass all test and coverage should be 100%) $ ./scripts/test.sh ## 6. Format code $ ./scripts/format.sh ## 7. Check lint (mypy) $ ./scripts/lint.sh ## 8. Commit and Push...","title":"How to contribute"}]}